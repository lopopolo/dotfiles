let g:python_host_prog = '/usr/local/var/pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/usr/local/var/pyenv/versions/neovim3/bin/python'

" ==================================== Plug ===================================
call plug#begin()

Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-hashicorp-tools'
Plug 'junegunn/goyo.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'w0rp/ale'
Plug 'zxqfl/tabnine-vim'

call plug#end()

" =============================== Basic settings ==============================
syntax on
filetype plugin indent on

set nocompatible
set noswapfile

set encoding=utf-8

set expandtab
set tabstop=2
set shiftwidth=2
set smartindent
set number
set ruler

set modeline

let mapleader = ","

" searching
set ignorecase
set smartcase
set showmatch
set hlsearch
set gdefault
nnoremap <leader><space> :noh<cr>

" status lines
set statusline=%<%F%h%m%r%h%w%y\ %{fugitive#statusline()}\ %{&ff}\ lin:%l\,%L\ col:%c%V\ pos:%o\ %P
set cursorline

" crutches
" set autochdir
set mouse=a

" ============================== Command mappings =============================

" save a buffer I don't have the perms for
cmap w!! :w !sudo tee %<CR>

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>

" ================================ Color scheme ===============================

" solarized
set background=light
colorscheme solarized8

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" =============================== Auto commands ===============================

" strip trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

augroup strip_trailing_whitespace
    au!
    " but not in markdown where trailing whitespace is significant
    au BufWritePre * if &ft!~?'markdown' | :call <SID>StripTrailingWhitespaces() | endif
augroup END

augroup save_on_lose_focus
    au!
    " save on lose focus, but don't complain if you can't
    au FocusLost * silent! wa
augroup END

augroup restore_cursor
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
augroup END

augroup vimrcEx
    au!
    " Automatically load .vimrc source when saved
    autocmd BufWritePost .vimrc,vimrc,.gvimrc,gvimrc source $MYVIMRC
augroup END

" ==================== Typo prevention and other vim remaps ===================

nnoremap ; :

" let me type :W to save, cuz that always happens
cnoreabbrev W w

" =============================== Plugin stuff  ===============================

" Quickly display a markdown preview of the current buffer
map <leader>m :%w ! markdown.rb > temp.html && open temp.html<CR><CR>

let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" nerdtree shortcut
map <leader>n :NERDTree
map <leader>nt :NERDTreeToggle<CR>
" nerdtree settings
let g:NERDTreeChDirMode=1

" supertab
let g:SuperTabDefaultCompletionType = "context"

" ale
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline+=%=%{LinterStatus()}

" gitgutter
set updatetime=250
