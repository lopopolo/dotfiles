let g:python_host_prog = '/usr/local/var/pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/usr/local/var/pyenv/versions/neovim3/bin/python'

" https://github.com/rust-lang/rust.vim#formatting-with-rustfmt
let g:rustfmt_autosave = 1

" ==================================== Plug ===================================
call plug#begin()

function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-hashicorp-tools'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mattly/vim-markdown-enhancements'
Plug 'powerline/fonts', { 'do': './install.sh' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'uarun/vim-protobuf'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'w0rp/ale'
Plug 'Xuyuanp/nerdtree-git-plugin'

call plug#end()

" =============================== Basic settings ==============================
syntax on
filetype plugin indent on

set clipboard+=unnamedplus

set nocompatible
set noswapfile

set encoding=utf-8

set expandtab
set tabstop=2
set shiftwidth=2
set smartindent
set number
set ruler

set modeline

let mapleader = ","

" searching
set ignorecase
set smartcase
set showmatch
set hlsearch
set gdefault
nnoremap <leader><space> :noh<cr>

" status lines
set cursorline

" crutches
" set autochdir
set mouse=a

" ================================ Color scheme ===============================

set termguicolors

" solarized
set background=light
colorscheme solarized8_flat

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" =============================== Auto commands ===============================

" strip trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

augroup strip_trailing_whitespace
  autocmd!
  " but not in markdown where trailing whitespace is significant
  autocmd BufWritePre * if &ft!~?'markdown' | :call <SID>StripTrailingWhitespaces() | endif
augroup END

augroup save_on_lose_focus
  autocmd!
  " save on lose focus, but don't complain if you can't
  autocmd FocusLost * silent! wa
augroup END

augroup restore_cursor
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
              \ if line("'\"") > 0 && line("'\"") <= line("$") |
              \   exe "normal g`\"" |
              \ endif
augroup END

augroup vimrcEx
  autocmd!
  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc,vimrc,.gvimrc,gvimrc source $MYVIMRC
augroup END

" ==================== Typo prevention and other vim remaps ===================

nnoremap ; :

" let me type :W to save, cuz that always happens
cnoreabbrev W w

augroup prevent_saving_typoed_names
  autocmd!
  " https://stackoverflow.com/a/6211489
  autocmd BufWritePre [:;]* try | echoerr 'Forbidden file name: ' . expand('<afile>') | endtry
augroup END

" =============================== Plugin stuff  ===============================

let g:EditorConfig_exclude_patterns = ['fugitive://.*']


" airline
let g:airline_powerline_fonts = 1
let g:airline_theme =  "solarized"
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1

" nerdtree
" How can I map a specific key or shortcut to open NERDTree?
map <C-o> :NERDTreeToggle<CR>
augroup nerdtree
  autocmd!
  " How can I open a NERDTree automatically when vim starts up if no files were
  " specified?
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  " How can I close vim if the only window left open is a NERDTree?
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END
let NERDTreeQuitOnOpen = 1

" deoplete
let g:deoplete#enable_at_startup = 1

" racer
let g:racer_experimental_completer = 1
let g:racer_insert_paren = 1
au FileType rust nmap <leader>rx <Plug>(rust-doc)
au FileType rust nmap <leader>rd <Plug>(rust-def)
au FileType rust nmap <leader>rs <Plug>(rust-def-split)

" gitgutter
set updatetime=250

" fzf
map <C-p> :Files<CR>
map <C-g> :Rg<CR>
let $FZF_DEFAULT_COMMAND  = 'rg --files --hidden'
