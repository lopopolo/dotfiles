let g:python3_host_prog = '~/.pyenv/versions/neovim3/bin/python'
let g:loaded_python_provider = 0
let g:loaded_ruby_provider = 0

" https://github.com/rust-lang/rust.vim#formatting-with-rustfmt
let g:rustfmt_autosave = 1

" ==================================== Plug ===================================
call plug#begin()

Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-hashicorp-tools'
" Completion framework
Plug 'hrsh7th/nvim-cmp'
" LSP completion source for nvim-cmp
Plug 'hrsh7th/cmp-nvim-lsp'
" Snippet completion source for nvim-cmp
Plug 'hrsh7th/cmp-vsnip'
" Other usefull completion sources
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
" Snippet engine
Plug 'hrsh7th/vim-vsnip'
Plug 'iamcco/markdown-preview.nvim',  {'do': 'cd app && yarn install --frozen-lockfile'}
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mattly/vim-markdown-enhancements'
Plug 'nathangrigg/vim-beancount'
Plug 'neoclide/coc.nvim',      {'branch': 'release'}
Plug 'neovim/nvim-lspconfig'
Plug 'powerline/fonts',        {'do': './install.sh'}
Plug 'sheerun/vim-polyglot'
" To enable more of the features of rust-analyzer, such as inlay hints and more!
Plug 'simrat39/rust-tools.nvim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
" vim-sensible has been incorporated into neovim
" https://github.com/neovim/neovim/issues/1664
if !has('nvim')
  Plug 'tpope/vim-sensible'
endif
Plug 'tpope/vim-surround'
Plug 'uarun/vim-protobuf'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" =============================== Basic settings ==============================
syntax on
filetype plugin indent on

" normal OS clipboard interaction
set clipboard+=unnamedplus

set nocompatible

set termencoding=utf-8
set encoding=utf-8

" hide buffers instead of closing them this
"    means that the current buffer can be put
"    to background without being written; and
"    that marks and undo history are preserved
set hidden

" don't wrap lines
set nowrap
" a tab is two spaces
set tabstop=2
" expand tabs by default (overloadable per file type later)
set expandtab
" number of spaces to use for autoindenting
set shiftwidth=2
set smartindent
" always show line numbers
set number
set autoread

" change the mapleader from \ to ,
let mapleader = ","

" ignore case when searching
set ignorecase
" ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
" set show matching parenthesis
set showmatch
" highlight search terms
set hlsearch
" show search matches as you type
set incsearch
" search/replace "globally" (on a line) by default
set gdefault

" Alias to disable highlighting from search matches
nnoremap <leader><space> :noh<cr>

" status lines
set cursorline

" change the terminal's title
set title
" don't beep
set visualbell
" don't beep
set noerrorbells

" do not keep backup files, it's 70's style cluttering
set nobackup
" do not write out changes via backup files
set nowritebackup
" do not write annoying intermediate swap files
set noswapfile

" enable using the mouse if terminal emulator supports it (xterm does)
set mouse=a

" Speed up the updatetime so gitgutter and friends are quicker
set updatetime=250

" Make the keyboard faaaaaaast
set ttyfast
set timeout timeoutlen=1000 ttimeoutlen=50

" show (partial) command in the last line of the screen
"    this also shows visual selection info
set showcmd

" disable mode lines (security measure)
set nomodeline

" Remap j and k to act as expected when used on long, wrapped, lines
nnoremap j gj
nnoremap k gk

" Persistent undo
if has("persistent_undo")
  set undofile
  set undodir=$HOME/.vim/undo

  " use many muchos levels of undo
  set undolevels=1000
  set undoreload=10000
endif

" ================================ Color scheme ===============================

set termguicolors

" solarized
set background=light
colorscheme solarized8_flat

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" =============================== Auto commands ===============================

" strip trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

augroup strip_trailing_whitespace
  autocmd!
  " but not in markdown where trailing whitespace is significant
  autocmd BufWritePre * if &ft!~?'markdown' | :call <SID>StripTrailingWhitespaces() | endif
augroup END

augroup save_on_lose_focus
  autocmd!
  " save on lose focus, but don't complain if you can't
  autocmd FocusLost * silent! wa
augroup END

augroup restore_cursor
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
              \ if line("'\"") > 0 && line("'\"") <= line("$") |
              \   exe "normal g`\"" |
              \ endif
augroup END

augroup vimrcEx
  autocmd!
  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc,vimrc,.gvimrc,gvimrc source $MYVIMRC
augroup END

" ==================== Typo prevention and other vim remaps ===================

nnoremap ; :

" let me type :W to save, cuz that always happens
cnoreabbrev W w

" disable Ex mode
map Q <Nop>

augroup prevent_saving_typoed_names
  autocmd!
  " https://stackoverflow.com/a/6211489
  autocmd BufWritePre [:;"'\[\]]* try | echoerr 'Forbidden file name: ' . expand('<afile>') | endtry
augroup END

" =============================== Plugin stuff  ===============================

let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" airline
let g:airline_powerline_fonts = 1
let g:airline_theme =  "solarized"
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1

" fzf
set rtp+=/usr/local/opt/fzf
map <C-p> :Files<CR>
map <C-g> :Rg<CR>
let $FZF_DEFAULT_COMMAND  = 'rg --files'

" LSP

" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" Avoid showing extra messages when using completion
set shortmess+=c

" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#bashls
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#dockerls
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#graphql
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#pyright
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#terraformls
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#tsserver
" https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#vimls
lua << EOF
local nvim_lsp = require'lspconfig'

require'lspconfig'.bashls.setup{}
require'lspconfig'.dockerls.setup{}
require'lspconfig'.graphql.setup{}
require'lspconfig'.pyright.setup{}
require'lspconfig'.terraformls.setup{}
require'lspconfig'.tsserver.setup{}
require'lspconfig'.vimls.setup{}
require'lspconfig'.yamlls.setup{}

local opts = {
    tools = { -- rust-tools options
        autoSetHints = true,
        hover_with_actions = true,
        inlay_hints = {
            show_parameter_hints = false,
            parameter_hints_prefix = "",
            other_hints_prefix = "",
        },
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
    server = {
        -- on_attach is a callback called when the language server attachs to the buffer
        -- on_attach = on_attach,
        settings = {
            -- to enable rust-analyzer settings visit:
            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
            ["rust-analyzer"] = {
                -- enable clippy on save
                checkOnSave = {
                    command = "clippy"
                },
            }
        }
    },
}

require('rust-tools').setup(opts)
EOF

" Setup Completion
" See https://github.com/hrsh7th/nvim-cmp#basic-configuration
lua << EOF
local cmp = require'cmp'
cmp.setup({
  -- Enable LSP snippets
  snippet = {
    expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },

  -- Installed sources
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'path' },
    { name = 'buffer' },
  },
})
EOF
