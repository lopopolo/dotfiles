# shellcheck shell=bash
# vim: filetype=sh

export EDITOR
EDITOR="$(command -v vim)"

# unset `PROMPT_COMMAND`. This is the beginning of initialization so we aren't in danger
# of losing anything. If we don't unset it, we end up chaining calls to the function
# `prompt_command` which breaks coloring the `$PS1` based on exit code.
unset PROMPT_COMMAND

unset -f prepend_to_path
function prepend_to_path
{
  if ! [[ "$PATH" =~ (^|:)${1}($|:) ]]; then
    export PATH="$1:${PATH}"
  fi
}

unset -f append_to_path
function append_to_path
{
  if ! [[ "$PATH" =~ (^|:)${1}($|:) ]]; then
    export PATH="${PATH}:$1"
  fi
}

# shellcheck source=files/.bashrc.mac
source "$HOME/.bashrc.mac"

# TERM setup
export CLICOLOR=1
export TERM="xterm-256color"
# colors
export BLACK="\\033[0;30m"
export RED="\\033[0;31m"
export GREEN="\\033[0;32m"
export YELLOW="\\033[0;33m"
export BLUE="\\033[0;34m"
export MAGENTA="\\033[0;35m"
export CYAN="\\033[0;36m"
export WHITE="\\033[0;37m"
export PLAIN="\\033[m"

# bash history
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# https://news.ycombinator.com/item?id=11811272
export HISTCONTROL=ignoreboth
export HISTSIZE=""
export HISTIGNORE="ls:exit:history:[bf]g:jobs"
shopt -s histappend

# The single best bash config option of all time. Also, see .inputrc for more vi
# goodness in readline-enabled apps.
set -o vi

prepend_to_path "$HOME/.dotfiles/scripts"

# =========================================================================== #
# Aliases
# =========================================================================== #
alias src='source "$HOME/.bashrc"'
alias la='ls -la'

# Make it quicker to edit the bashrc's
alias b='vim "$HOME/.bashrc.dotfiles"'
alias bm='vim "$HOME/.bashrc.mac"'
# and vimrc
alias vv='vim "$HOME/.vimrc"'

# Alias g=git and add bash completion
alias g='git'
complete -o bashdefault -o default -o nospace -F _git g

# Same for vim
alias v='vim'
complete -o filenames -F _filedir_xspec v

# json pretty printing
alias jsonpp='python -mjson.tool'

# =========================================================================== #
# useful shell functions
# =========================================================================== #
unset -f freq
unset -f is_not_ascii
unset -f diff_line_count
unset -f rand_string

# freq prints out a list of my most frequently used commands
function freq
{
  cut -d" " -f1 ~/.bash_history |
    grep -Ev "^[[:space:]]*$" |
    sort |
    uniq -c |
    sort -rn |
    head
}

# This function prints out lines in the given files that
# contain non-ascii characters
function is_not_ascii
{
  if [[ "$#" == "0" ]]; then
    echo "Usage: $0 file1 file2 ..."
    return 1
  fi
  local argc="$#"
  while (( "$#" )); do
    if [[ "$argc" -gt "1" ]]; then echo "$1:"; fi
    perl -nwe 'print if /[^[:ascii:]]/' "$1"
    shift
  done
}

function diff_line_count
{
  git diff-index --numstat HEAD
}

function rand_string {
  LANG=C < /dev/urandom tr -dc A-HJ-KM-NP-Za-km-np-z2-9 | head -c"${1:-32}"
  echo
}

# =========================================================================== #
# Prompt
# =========================================================================== #

# This PS1 does the following:
# * Set terminal title to current directory name
# * prints [24-hour time] [current working directory] [battery status] (git prompt)
# * prints prompt caret colored by last exit code
function prompt_command
{
  local -r last_exit_code="$?"
  local git_prompt
  git_prompt="$(__git_ps1 "%s")"
  if [[ -n "$git_prompt" ]]; then
    local level="=" ahead behind dirty git_color="$GREEN"
    if git rev-list "@{u}" >/dev/null 2>&1; then
      while read -r rev; do
        if [[ "${rev:0:1}" == "<" ]]; then ahead=">"; level=""; fi
        if [[ "${rev:0:1}" == ">" ]]; then behind="<"; level=""; fi
      done < <(git rev-list --left-right "HEAD...@{u}")
    fi

    if [[ -n "$(git diff-index --name-only HEAD)" ]]; then
      dirty="*"
      git_color="$YELLOW"
    fi
    git_prompt="${git_color}(${git_prompt} ${dirty}${level}${behind}${ahead})${PLAIN}"
  fi

  local prompt_color="$GREEN"
  if [[ "$last_exit_code" != "0" ]]; then
    prompt_color="$RED"
  fi

  # if we're on a mac, add battery info
  local battery=" "
  if [ "$PLATFORM" == "MAC" ]; then
    battery="$(battery -p) "
  fi

  local venv=""
  if [[ -n "$VIRTUAL_ENV" ]]; then
    venv="(${VIRTUAL_ENV##*/}) "
  fi

  local -r term_title="\\033]0;\\W\\007"
  local -r prompt_line="\\[${YELLOW}\\]${venv}\\[${PLAIN}\\]\\[${prompt_color}\\]â–¶\\[${PLAIN}\\] "
  export PS1="${term_title}\\[${BLACK}\\][\\A] [\\w] ${battery}${git_prompt}\\n${prompt_line}"
}
shopt -u promptvars
PROMPT_COMMAND="prompt_command;$PROMPT_COMMAND"
export PS1='$ '

# =========================================================================== #
# Tools
# =========================================================================== #

# stuff for moving around directories
# https://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/
CDPATH=".:$HOME:$HOME/dev:$HOME/dev/repos"

export GOPATH="$HOME/dev/gopath"
prepend_to_path "$GOPATH/bin"

# =========================================================================== #
# ssh-agent
# =========================================================================== #

ssh_env="$HOME/.ssh/environment"

unset -f start_agent
function start_agent
{
  echo "Initialising new SSH agent..."
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' >"$ssh_env"
  echo "Succeeded"
  chmod 600 "$ssh_env"
  . "$ssh_env" >/dev/null
}

# Source SSH settings, if applicable
unset -f find_or_start_agent
function find_or_start_agent() {
  if [ -f "$ssh_env" ]; then
    . "$ssh_env" >/dev/null
    if ! pgrep ssh-agent | grep -q "$SSH_AGENT_PID"; then
      start_agent
    fi
  else
    start_agent
  fi
}

find_or_start_agent
